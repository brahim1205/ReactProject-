import { PrismaClient } from '@prisma/client';

export class ScheduledTaskService {
  constructor(private prisma: PrismaClient) {}

  /**
   * Met √† jour automatiquement les statuts des t√¢ches planifi√©es
   */
  async updateScheduledTaskStatuses(): Promise<void> {
    const now = new Date();

    try {
      console.log('üîÑ V√©rification des t√¢ches planifi√©es...');

      // 1. T√¢ches en attente dont l'heure de d√©but est arriv√©e ‚Üí en cours
      const tasksToStart = await this.prisma.todo.findMany({
        where: {
          status: 'pending',
          startDateTime: {
            lte: now
          },
          endDateTime: {
            gt: now // S'assurer que ce n'est pas d√©j√† termin√©
          }
        }
      });

      if (tasksToStart.length > 0) {
        await this.prisma.todo.updateMany({
          where: {
            id: { in: tasksToStart.map(t => t.id) }
          },
          data: {
            status: 'in_progress'
          }
        });
        console.log(`‚úÖ ${tasksToStart.length} t√¢che(s) pass√©e(s) en cours`);
      }

      // 2. T√¢ches en cours dont l'heure de fin est arriv√©e ‚Üí termin√©e
      const tasksToComplete = await this.prisma.todo.findMany({
        where: {
          status: 'in_progress',
          endDateTime: {
            lte: now
          }
        }
      });

      if (tasksToComplete.length > 0) {
        // Mettre √† jour les t√¢ches
        await this.prisma.todo.updateMany({
          where: {
            id: { in: tasksToComplete.map(t => t.id) }
          },
          data: {
            status: 'completed',
            completedAt: now
          }
        });

        // Cr√©er des notifications pour les propri√©taires
        for (const task of tasksToComplete) {
          await this.prisma.notification.create({
            data: {
              type: 'task_reminder',
              title: 'T√¢che termin√©e automatiquement',
              message: `Votre t√¢che "${task.title}" a √©t√© termin√©e automatiquement car l'heure de fin planifi√©e est arriv√©e.`,
              recipientId: task.userId,
              todoId: task.id,
              todoTitle: task.title
            }
          });
        }

        console.log(`‚úÖ ${tasksToComplete.length} t√¢che(s) termin√©e(s) automatiquement`);
      }

      // 3. T√¢ches planifi√©es dont l'heure de fin est d√©pass√©e sans √™tre pass√©es en cours ‚Üí termin√©e
      const overdueTasks = await this.prisma.todo.findMany({
        where: {
          status: 'pending',
          endDateTime: {
            lte: now
          }
        }
      });

      if (overdueTasks.length > 0) {
        await this.prisma.todo.updateMany({
          where: {
            id: { in: overdueTasks.map(t => t.id) }
          },
          data: {
            status: 'completed',
            completedAt: now
          }
        });
        console.log(`‚ö†Ô∏è ${overdueTasks.length} t√¢che(s) en retard termin√©e(s)`);
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des statuts:', error);
    }
  }

  /**
   * R√©cup√®re les statistiques des t√¢ches planifi√©es
   */
  async getScheduledTasksStats() {
    const [
      pendingCount,
      inProgressCount,
      completedCount,
      overdueCount
    ] = await Promise.all([
      this.prisma.todo.count({
        where: {
          status: 'pending',
          startDateTime: { not: null }
        }
      }),
      this.prisma.todo.count({
        where: {
          status: 'in_progress',
          startDateTime: { not: null }
        }
      }),
      this.prisma.todo.count({
        where: {
          status: 'completed',
          startDateTime: { not: null }
        }
      }),
      this.prisma.todo.count({
        where: {
          status: 'pending',
          endDateTime: { lte: new Date() }
        }
      })
    ]);

    return {
      pending: pendingCount,
      inProgress: inProgressCount,
      completed: completedCount,
      overdue: overdueCount
    };
  }
}

export default ScheduledTaskService;