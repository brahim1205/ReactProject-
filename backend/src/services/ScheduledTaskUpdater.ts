import { ScheduledTaskService } from './ScheduledTaskService';
import { NotificationService } from './NotificationService';
import { PrismaClient } from '@prisma/client';

export class ScheduledTaskUpdater {
  private scheduledTaskService: ScheduledTaskService;
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;

  constructor(private prisma: PrismaClient, private notificationService: NotificationService) {
    this.scheduledTaskService = new ScheduledTaskService(prisma, notificationService);
  }

  /**
   * D√©marre la mise √† jour p√©riodique des t√¢ches planifi√©es
   * @param intervalMinutes Intervalle en minutes (d√©faut: 1 minute)
   */
  start(intervalMinutes: number = 1): void {
    if (this.isRunning) {
      console.log('üîÑ ScheduledTaskUpdater d√©j√† en cours d\'ex√©cution');
      return;
    }

    this.isRunning = true;
    const intervalMs = intervalMinutes * 60 * 1000;

    console.log(`üöÄ D√©marrage de ScheduledTaskUpdater (intervalle: ${intervalMinutes}min)`);

    // Ex√©cute imm√©diatement une premi√®re fois
    this.updateStatuses();

    // Puis configure l'intervalle
    this.intervalId = setInterval(() => {
      this.updateStatuses();
    }, intervalMs);
  }

  /**
   * Arr√™te la mise √† jour p√©riodique
   */
  stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      this.isRunning = false;
      console.log('‚èπÔ∏è ScheduledTaskUpdater arr√™t√©');
    }
  }

  /**
   * Met √† jour manuellement les statuts des t√¢ches planifi√©es
   */
  async updateStatuses(): Promise<void> {
    try {
      console.log('üîÑ V√©rification des t√¢ches planifi√©es...');
      await this.scheduledTaskService.updateScheduledTaskStatuses();

      // Afficher les statistiques
      const stats = await this.scheduledTaskService.getScheduledTasksStats();
      console.log('üìä Statistiques des t√¢ches planifi√©es:', stats);

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour des statuts:', error);
    }
  }

  /**
   * V√©rifie si le service est en cours d'ex√©cution
   */
  isActive(): boolean {
    return this.isRunning;
  }
}

// Instance globale pour l'application
let globalUpdater: ScheduledTaskUpdater | null = null;

/**
 * Fonction utilitaire pour d√©marrer le service de mise √† jour
 */
export function startScheduledTaskUpdater(prisma: PrismaClient, notificationService: NotificationService, intervalMinutes: number = 1): ScheduledTaskUpdater {
  if (!globalUpdater) {
    globalUpdater = new ScheduledTaskUpdater(prisma, notificationService);
  }
  globalUpdater.start(intervalMinutes);
  return globalUpdater;
}

/**
 * Fonction utilitaire pour arr√™ter le service
 */
export function stopScheduledTaskUpdater(): void {
  if (globalUpdater) {
    globalUpdater.stop();
    globalUpdater = null;
  }
}

/**
 * Fonction utilitaire pour obtenir l'instance globale
 */
export function getScheduledTaskUpdater(): ScheduledTaskUpdater | null {
  return globalUpdater;
}

export default ScheduledTaskUpdater;